{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Rome Bridge Rome Bridge is an adapter between Feature Stores and Data Science Models. It makes it so that there is a common interface to models and also eliminates the trouble (and risk) in feeding features into a data science model. Too frequently you will find yourself spending too much time rewriting the interface code. With this standard intefrace you can swithch out Feature Stores or Models without a lot of code changes.","title":"Home"},{"location":"#welcome-to-rome-bridge","text":"Rome Bridge is an adapter between Feature Stores and Data Science Models. It makes it so that there is a common interface to models and also eliminates the trouble (and risk) in feeding features into a data science model. Too frequently you will find yourself spending too much time rewriting the interface code. With this standard intefrace you can swithch out Feature Stores or Models without a lot of code changes.","title":"Welcome to Rome Bridge"},{"location":"Contribute/","text":"Developers You found yourself here usually because of either: You want to developed a new plugin for Rome Bridge to eiter read from a feature store or you wish to connect a feature store to a Data Science Model. or You want to develop on the Rome Bridge Project or contribute your already written plugin to Rome Bridge. for those who want to build a plugin You can easily develope insteall and run a plugin by simply inherting from rome_bridge.feature_store.RomeBaseFeatureStore class for Feature stores, or rome_bridge.models.RomeBaseModel . Example: >>> from rome_bridge.feature_store import RomeBaseFeatureStore for those who want to develope on Rome Bridge publishing the documentation Once you can commit to gh-pages on https://github.com/methodical-company/rome-bridge project, you can run the command mkdocs gh-deploy That will deploy to the github pages site.","title":"Contribute"},{"location":"Contribute/#developers","text":"You found yourself here usually because of either: You want to developed a new plugin for Rome Bridge to eiter read from a feature store or you wish to connect a feature store to a Data Science Model. or You want to develop on the Rome Bridge Project or contribute your already written plugin to Rome Bridge.","title":"Developers"},{"location":"Contribute/#for-those-who-want-to-build-a-plugin","text":"You can easily develope insteall and run a plugin by simply inherting from rome_bridge.feature_store.RomeBaseFeatureStore class for Feature stores, or rome_bridge.models.RomeBaseModel . Example: >>> from rome_bridge.feature_store import RomeBaseFeatureStore","title":"for those who want to build a plugin"},{"location":"Contribute/#for-those-who-want-to-develope-on-rome-bridge","text":"","title":"for those who want to develope on Rome Bridge"},{"location":"Contribute/#publishing-the-documentation","text":"Once you can commit to gh-pages on https://github.com/methodical-company/rome-bridge project, you can run the command mkdocs gh-deploy That will deploy to the github pages site.","title":"publishing the documentation"},{"location":"explorer-reference/","text":"Rome Explorer Provide several explorer utilities for navigating capabilities loaded into Rome Bridge Example: >>> from rome_bridge import explorer >>> explore = explorer.RomeExplorer() >>> explore.print_feature_store_description(\"RomeFeast\") RomeFeast RomeExplorer Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes str list of installed feature_stores Methods describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores Source code in rome_bridge/explorer.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class RomeExplorer : \"\"\" Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes ---------- feature_stores : str list of installed feature_stores Methods ------- describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores \"\"\" def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str ) __init__ ( additional_feature_stores = []) init for RomeExplorer Parameters: Name Type Description Default additional_feature_stores list [ RomeBaseFeatureStore ] additonal loaded feature stores. Defaults to []. [] Source code in rome_bridge/explorer.py 37 38 39 40 41 42 43 44 def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores print_feature_store_description ( feature_store_name ) Prints out a description of the Feature Store installed in Rome Parameters: Name Type Description Default feature_store_name str The Name of the Feature Store Class as a String required Returns: Type Description None None Source code in rome_bridge/explorer.py 46 47 48 49 50 51 52 53 54 55 56 def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"Rome Explorer"},{"location":"explorer-reference/#rome-explorer","text":"Provide several explorer utilities for navigating capabilities loaded into Rome Bridge Example: >>> from rome_bridge import explorer >>> explore = explorer.RomeExplorer() >>> explore.print_feature_store_description(\"RomeFeast\") RomeFeast","title":"Rome Explorer"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer","text":"Rome Explorer Class for finding and explaining Rome Feature Stores. ...","title":"RomeExplorer"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer--attributes","text":"str list of installed feature_stores","title":"Attributes"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer--methods","text":"describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores Source code in rome_bridge/explorer.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class RomeExplorer : \"\"\" Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes ---------- feature_stores : str list of installed feature_stores Methods ------- describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores \"\"\" def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"Methods"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer.__init__","text":"init for RomeExplorer Parameters: Name Type Description Default additional_feature_stores list [ RomeBaseFeatureStore ] additonal loaded feature stores. Defaults to []. [] Source code in rome_bridge/explorer.py 37 38 39 40 41 42 43 44 def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores","title":"__init__()"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer.print_feature_store_description","text":"Prints out a description of the Feature Store installed in Rome Parameters: Name Type Description Default feature_store_name str The Name of the Feature Store Class as a String required Returns: Type Description None None Source code in rome_bridge/explorer.py 46 47 48 49 50 51 52 53 54 55 56 def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"print_feature_store_description()"}]}