{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Rome Bridge Rome Bridge is an adapter between Feature Stores and Data Science Models. A common interface for feading features to machine learning models helps expidite developement, allow interchangability and reduces the risk involved with accidently feending features into models the wrong way. Supported Feature Stores Product Open Source Link AWS Sagemaker Feature Store No link Tecton No link Databrick Feature Store No link Feature Form No link Feast Yes link Vertex AI No link Hopswork Yes link feathr Yes link Rasgo No link Butterfree Yes link Bytehub Yes link Kaskada No link ScribbleData No link Supported Data Science Models Model flavor Link Rulefit Regressor sklearn.ensemble.GradientBoostingRegressor Link ExtraTrees Regressor sklearn.ensemble.ExtraTreesRegressor Link Random Forest sklearn.ensemble.RandomForestRegressor Link Average Blender sklearn.linear_model.LogisticRegression Link eXtreme Gradient Boosted Trees Regressor sklearn.ensemble.GradientBoostingRegressor or xgboost Link Link Light Gradient Boosted Trees Regressor lightgbm.ESLGBMTR Link Decision Tree Regressor sklearn.tree.DecisionTreeRegressor Link Support Vector Machines libsvm Link Elastic Net Regressor or Ridge Regressor lightning's CDRegressor Link Auto tune kNN Regressor sklearn.neighbors.KNeighborsRegressor Link Breiman and Cutler Random Forest Regressor R Link online gradient descent variant vowpal wabbit Regressor Link Neural Network Regressor TensorFlow Link Generalized Additive Model LinearGAM Link Linear Regression sklearn.linear_model.LinearRegression Link","title":"Home"},{"location":"#welcome-to-rome-bridge","text":"Rome Bridge is an adapter between Feature Stores and Data Science Models. A common interface for feading features to machine learning models helps expidite developement, allow interchangability and reduces the risk involved with accidently feending features into models the wrong way.","title":"Welcome to Rome Bridge"},{"location":"#supported-feature-stores","text":"Product Open Source Link AWS Sagemaker Feature Store No link Tecton No link Databrick Feature Store No link Feature Form No link Feast Yes link Vertex AI No link Hopswork Yes link feathr Yes link Rasgo No link Butterfree Yes link Bytehub Yes link Kaskada No link ScribbleData No link","title":"Supported Feature Stores"},{"location":"#supported-data-science-models","text":"Model flavor Link Rulefit Regressor sklearn.ensemble.GradientBoostingRegressor Link ExtraTrees Regressor sklearn.ensemble.ExtraTreesRegressor Link Random Forest sklearn.ensemble.RandomForestRegressor Link Average Blender sklearn.linear_model.LogisticRegression Link eXtreme Gradient Boosted Trees Regressor sklearn.ensemble.GradientBoostingRegressor or xgboost Link Link Light Gradient Boosted Trees Regressor lightgbm.ESLGBMTR Link Decision Tree Regressor sklearn.tree.DecisionTreeRegressor Link Support Vector Machines libsvm Link Elastic Net Regressor or Ridge Regressor lightning's CDRegressor Link Auto tune kNN Regressor sklearn.neighbors.KNeighborsRegressor Link Breiman and Cutler Random Forest Regressor R Link online gradient descent variant vowpal wabbit Regressor Link Neural Network Regressor TensorFlow Link Generalized Additive Model LinearGAM Link Linear Regression sklearn.linear_model.LinearRegression Link","title":"Supported Data Science Models"},{"location":"Contribute/","text":"Developers You found yourself here usually because of either: You want to developed a new plugin for Rome Bridge to eiter read from a feature store or you wish to connect a feature store to a Data Science Model. or You want to develop on the Rome Bridge Project or contribute your already written plugin to Rome Bridge. for those who want to build a plugin You can easily develope insteall and run a plugin by simply inherting from rome_bridge.feature_store.RomeBaseFeatureStore class for Feature stores, or rome_bridge.models.RomeBaseModel . Example: >>> from rome_bridge.feature_store import RomeBaseFeatureStore for those who want to develope on Rome Bridge publishing the documentation Once you can commit to gh-pages on https://github.com/methodical-company/rome-bridge project, you can run the command mkdocs gh-deploy That will deploy to the github pages site.","title":"Contribute"},{"location":"Contribute/#developers","text":"You found yourself here usually because of either: You want to developed a new plugin for Rome Bridge to eiter read from a feature store or you wish to connect a feature store to a Data Science Model. or You want to develop on the Rome Bridge Project or contribute your already written plugin to Rome Bridge.","title":"Developers"},{"location":"Contribute/#for-those-who-want-to-build-a-plugin","text":"You can easily develope insteall and run a plugin by simply inherting from rome_bridge.feature_store.RomeBaseFeatureStore class for Feature stores, or rome_bridge.models.RomeBaseModel . Example: >>> from rome_bridge.feature_store import RomeBaseFeatureStore","title":"for those who want to build a plugin"},{"location":"Contribute/#for-those-who-want-to-develope-on-rome-bridge","text":"","title":"for those who want to develope on Rome Bridge"},{"location":"Contribute/#publishing-the-documentation","text":"Once you can commit to gh-pages on https://github.com/methodical-company/rome-bridge project, you can run the command mkdocs gh-deploy That will deploy to the github pages site.","title":"publishing the documentation"},{"location":"explorer-reference/","text":"Rome Explorer Provide several explorer utilities for navigating capabilities loaded into Rome Bridge Example: >>> from rome_bridge import explorer >>> explore = explorer.RomeExplorer() >>> explore.print_feature_store_description(\"RomeFeast\") RomeFeast RomeExplorer Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes str list of installed feature_stores Methods describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores Source code in rome_bridge/explorer.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class RomeExplorer : \"\"\" Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes ---------- feature_stores : str list of installed feature_stores Methods ------- describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores \"\"\" def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str ) __init__ ( additional_feature_stores = []) init for RomeExplorer Parameters: Name Type Description Default additional_feature_stores list [ RomeBaseFeatureStore ] additonal loaded feature stores. Defaults to []. [] Source code in rome_bridge/explorer.py 37 38 39 40 41 42 43 44 def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores print_feature_store_description ( feature_store_name ) Prints out a description of the Feature Store installed in Rome Parameters: Name Type Description Default feature_store_name str The Name of the Feature Store Class as a String required Returns: Type Description None None Source code in rome_bridge/explorer.py 46 47 48 49 50 51 52 53 54 55 56 def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"Rome Explorer"},{"location":"explorer-reference/#rome-explorer","text":"Provide several explorer utilities for navigating capabilities loaded into Rome Bridge Example: >>> from rome_bridge import explorer >>> explore = explorer.RomeExplorer() >>> explore.print_feature_store_description(\"RomeFeast\") RomeFeast","title":"Rome Explorer"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer","text":"Rome Explorer Class for finding and explaining Rome Feature Stores. ...","title":"RomeExplorer"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer--attributes","text":"str list of installed feature_stores","title":"Attributes"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer--methods","text":"describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores Source code in rome_bridge/explorer.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class RomeExplorer : \"\"\" Rome Explorer Class for finding and explaining Rome Feature Stores. ... Attributes ---------- feature_stores : str list of installed feature_stores Methods ------- describe_feature_store(feature_store_name=\"feature_store\"): prints information about the feature_stores \"\"\" def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"Methods"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer.__init__","text":"init for RomeExplorer Parameters: Name Type Description Default additional_feature_stores list [ RomeBaseFeatureStore ] additonal loaded feature stores. Defaults to []. [] Source code in rome_bridge/explorer.py 37 38 39 40 41 42 43 44 def __init__ ( self , additional_feature_stores : list [ RomeBaseFeatureStore ] = [] ) -> None : \"\"\"__init__ for RomeExplorer Args: additional_feature_stores (list[RomeBaseFeatureStore], optional): additonal loaded feature stores. Defaults to []. \"\"\" self . modules = [ RomeFeast , ] self . modules += additional_feature_stores","title":"__init__()"},{"location":"explorer-reference/#rome_bridge.explorer.RomeExplorer.print_feature_store_description","text":"Prints out a description of the Feature Store installed in Rome Parameters: Name Type Description Default feature_store_name str The Name of the Feature Store Class as a String required Returns: Type Description None None Source code in rome_bridge/explorer.py 46 47 48 49 50 51 52 53 54 55 56 def print_feature_store_description ( self , feature_store_name : str ) -> None : \"\"\"Prints out a description of the Feature Store installed in Rome Args: feature_store_name (str): The Name of the Feature Store Class as a String Returns: None \"\"\" out_str = feature_store_name print ( out_str )","title":"print_feature_store_description()"},{"location":"roll_own/","text":"Roll your own how to roll your own Feature Store Adapter import RomeBaseFeatureStore how to roll your own Target Model import RomeBaseModel","title":"Roll Your Own"},{"location":"roll_own/#roll-your-own","text":"","title":"Roll your own"},{"location":"roll_own/#how-to-roll-your-own-feature-store-adapter","text":"import RomeBaseFeatureStore","title":"how to roll your own Feature Store Adapter"},{"location":"roll_own/#how-to-roll-your-own-target-model","text":"import RomeBaseModel","title":"how to roll your own Target Model"},{"location":"simple-example/","text":"simple example The old way This is using sklearn and Feast import feast from joblib import dump import pandas as pd from sklearn.linear_model import LinearRegression # Load driver order data orders = pd . read_csv ( \"/content/feast-driver-ranking-tutorial/driver_orders.csv\" , sep = \" \\t \" ) orders [ \"event_timestamp\" ] = pd . to_datetime ( orders [ \"event_timestamp\" ]) # Connect to your feature store provider fs = feast . FeatureStore ( repo_path = \"/content/feast-driver-ranking-tutorial/driver_ranking\" ) # Retrieve training data from BigQuery training_df = fs . get_historical_features ( entity_df = orders , feature_refs = [ \"driver_hourly_stats:conv_rate\" , \"driver_hourly_stats:acc_rate\" , \"driver_hourly_stats:avg_daily_trips\" , ], ) . to_df () print ( \"----- Feature schema ----- \\n \" ) print ( training_df . info ()) print () print ( \"----- Example features ----- \\n \" ) print ( training_df . head ()) # Train model target = \"trip_completed\" reg = LinearRegression () train_X = training_df [ training_df . columns . drop ( target ) . drop ( \"event_timestamp\" )] train_Y = training_df . loc [:, target ] reg . fit ( train_X [ sorted ( train_X )], train_Y ) # Save model dump ( reg , \"driver_model.bin\" ) The Rome Bridge Way import rome # Load driver order data orders = pd.read_csv(\"/content/feast-driver-ranking-tutorial/driver_orders.csv\", sep=\"\\t\") orders[\"event_timestamp\"] = pd.to_datetime(orders[\"event_timestamp\"]) fbstore = rome.bridge_feature_store(\"feast>=0.28\") fbmodel = rome.bridge_model(\"linear-regression==1.2.1\") df = fbstore.get(target=orders, feature_name_list=[ \"driver_hourly_stats:conv_rate\", \"driver_hourly_stats:acc_rate\", \"driver_hourly_stats:avg_daily_trips\"]) fbmodel.set_target(\"trip_completed\") fbmodel.fit(fbstore) fbmodel.dump(\"driver_model.bin\") ```","title":"Simple Example"},{"location":"simple-example/#simple-example","text":"","title":"simple example"},{"location":"simple-example/#the-old-way","text":"This is using sklearn and Feast import feast from joblib import dump import pandas as pd from sklearn.linear_model import LinearRegression # Load driver order data orders = pd . read_csv ( \"/content/feast-driver-ranking-tutorial/driver_orders.csv\" , sep = \" \\t \" ) orders [ \"event_timestamp\" ] = pd . to_datetime ( orders [ \"event_timestamp\" ]) # Connect to your feature store provider fs = feast . FeatureStore ( repo_path = \"/content/feast-driver-ranking-tutorial/driver_ranking\" ) # Retrieve training data from BigQuery training_df = fs . get_historical_features ( entity_df = orders , feature_refs = [ \"driver_hourly_stats:conv_rate\" , \"driver_hourly_stats:acc_rate\" , \"driver_hourly_stats:avg_daily_trips\" , ], ) . to_df () print ( \"----- Feature schema ----- \\n \" ) print ( training_df . info ()) print () print ( \"----- Example features ----- \\n \" ) print ( training_df . head ()) # Train model target = \"trip_completed\" reg = LinearRegression () train_X = training_df [ training_df . columns . drop ( target ) . drop ( \"event_timestamp\" )] train_Y = training_df . loc [:, target ] reg . fit ( train_X [ sorted ( train_X )], train_Y ) # Save model dump ( reg , \"driver_model.bin\" )","title":"The old way"},{"location":"simple-example/#the-rome-bridge-way","text":"import rome # Load driver order data orders = pd.read_csv(\"/content/feast-driver-ranking-tutorial/driver_orders.csv\", sep=\"\\t\") orders[\"event_timestamp\"] = pd.to_datetime(orders[\"event_timestamp\"]) fbstore = rome.bridge_feature_store(\"feast>=0.28\") fbmodel = rome.bridge_model(\"linear-regression==1.2.1\") df = fbstore.get(target=orders, feature_name_list=[ \"driver_hourly_stats:conv_rate\", \"driver_hourly_stats:acc_rate\", \"driver_hourly_stats:avg_daily_trips\"]) fbmodel.set_target(\"trip_completed\") fbmodel.fit(fbstore) fbmodel.dump(\"driver_model.bin\") ```","title":"The Rome Bridge Way"}]}